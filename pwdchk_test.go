package main

import "testing"

func TestMakeRequest(t *testing.T) {
	var (
		sha1Prefix string = "9E7C9"
		plainText  string = "P@ssw" // invalid hash
	)

	hashList := MakeRequest(sha1Prefix)

	if hashList == nil || len(hashList) == 0 {
		t.Log("This is a hash known to return correct data.")
		t.Fail()
	}

	hashList = MakeRequest(plainText)

	if hashList != nil || len(hashList) > 0 {
		t.Log("An invalid request was sent and should not have retrieved data.")
		t.Fail()
	}
}

func TestCheckPassword(t *testing.T) {
	// Partial list of formatted SHA1 passwords that begin
	// with '9E7C9'
	var testList1 = []string{
		"6B9CF07C074F0AD4B49E95FF82ACD2E9726:1",
		"6BC1128B9209910A2402C33BC2E325FFA1A:4",
		"6C53B5E592316E22DE28A58155A350E8C52:3",
		"6C940EE5815CC6FCE47726157355EA4E1B6:1",
		"6D0454021E92E5C71CD2036DDD7C08E544B:2",
		"6EBD09128AA642C74713332295797695834:7",
		"6EFADED045CCE970DD29F1AD26EA909B27C:2",
		"704D7299C0BF9E53CF06F1C634B321C719A:3",
		"70D96E071417468DB063A3BC34FD50C2F75:2",
		"7166D177B8269FBA45CFB1EB9DA75BB4A7E:1",
		"7189CAE2D19F58F4D4DA07B5967075E4934:1",
		"718C3407F0C815C9A9856624D5F5DD3F484:4",
		"71DED327E91081AB38F5FCA510BE837B4FF:1",
		"720A3654193C969049E6D457965A2AF30F6:2",
		"721EA16E4836EC4C51CC195EA2267303766:1",
		"72AFFF9EB8FACD3B73D32B3C7A815EC41E4:2",
		"72C8D6A37FE900369F15E7ACC272AE3AFC9:2",
		"7399A5EC449117FF556250600E438A3D64E:1",
		"7420EB7DFCC43351DB027DCFBF5682D5C63:1",
		"743F021435A820DA5E3BA521F08A5DA7A59:1",
		"747046C72BDC1CE5E7AE2817903B1A4893E:3",
		"74FF29A095562AFFDC7F38358A36DED0801:5",
		"77A571D6C82FF090D5E09208D87BB09A441:2",
		"77B1EE4BF1B49FEB288C7FC65EE604C0C54:18",
		"780087028CF36AF6A5A1DCF096748FB7090:5",
		"7801CB4CCE87B6C02F98291A6420E6400AD:7491",
		"782545129CEA7F3BD1A076F25B94C064CFE:2",
		"788872DE964354319100FCE0EF4DEA00311:2",
		"78E7305CD082625C6AC5D700D6C90772027:2",
		"79C0013EA832858A264927BE7EF3A3CFB4D:1",
		"7A00DBFE87AE485D13695B82E05A80BB11B:2",
		"7A8AFF6F0451A8C379B6998F65DA24329D4:1",
		"7A95C2684EA6FB48ADADEB78E3A5277DEE6:7",
		"7B1D7743917C9BE50BB662DEB6288CF0851:2",
		"7BBE5F83249FA8C2C638D91B4900A33380D:3",
		"7F4217801382DF42C9DB4B065D574C03B63:1",
		"7F7479D350955356294D7A37911B5BF9E0B:1",
		"7FDA5C02BA06BF78339C22F32A52207AE1C:1",
		"7FE861CEFDDADCD6DCF4DD35AC175D73496:2",
		"801B33DC2B8CB4E8C7EF5DACCE9236F6B80:28",
		"8067A2C25BD746CC18343D59B5DA44429DE:1",
		"807CD2BE4ABD83BB2BCA4FF43EB9F9BE0CF:1",
		"80A71CA05BD66EB502DE204DD2AD8CC771E:5",
		"80C71D4A7459A95CD9EA627DD2462EEB06E:4",
		"81870D37EE43A71699D45478518A8DBC1BA:2",
		"81C3D9D3856D44D9742FE268089426DA96B:5",
		"8203072E1BF7E695E9E174246B637D7A528:2",
		"8332C5B225FB30002BED7D347F0D51E3335:1",
		"8393900609B3F5D0514132C624988118B97:9",
		"8444FE6CD2CD338D6C915B2374C19F42774:1",
		"8505860536E36B5108C592D308B7BA37DF8:1",
		"8561BFBED93C998E3CB65757A66974F7EA2:37",
		"863E654BF2D3C3D86B077939F370A54B18E:2",
		"876FC54D75FCF3979418AA9E874F9D54B4D:2",
		"877B0F67602BD764BE249F24C3919090C19:2",
		"8843A8339C70C01EBF8E6844CCE15E15D6F:3",
		"88AD752699439BED564455699899B4AD427:1",
		"8AD220F8EAF7CC7BB99FC66EAC2608BF74D:1",
		"8BE79B824D212232727198E12E4B94A8064:1",
		"8BED4B3752380C790399732E6F76F82E55A:2",
		"8C53DB0FED98AC906ADBA9CE66669D20DDD:4",
		"8CC856AB9615C458FFE1D75CE9FC6DAB01D:1",
		"8D3CE76D4EF136E66886FB40E5A761409B5:1",
		"8DB3FB3A7F02E547DA8965355C0B08C7C7D:1",
		"8DCDC9417BC8EE3C19D53AECDECD2290EA2:3",
	}

	var testList2 = []string{
		"45343664EA7B53D051A9D17B983C126E4B0:1",
		"46257AC142690B25D0ED03326B5E16807A5:2",
		"464CDA13421B02B7A4F30C92019C2ABC29E:2",
		"481BECCDBC499F3946CDC313E59BA06AEED:3",
		"48EBE6772B23551CACC87689D64A7569351:15",
		"49307814DD99E2303C7EB8E2E76A3066F87:1",
		"4952EAECA9D721FAD886DFBF2EDA5D751AE:1",
		"49B8A8D93F53A92CC11960A75E9F82A0148:1",
		"49C6DCCF8063186A063F2789846AEE8E189:3",
		"4A8FD85C1C475393D08416C885686B4B961:1",
		"4AD6C1B0CC5A9E362570C7E573AB8A9ED77:4",
		"4C1A39DBFF78B33058E167BF21A34C84132:2",
		"4C2CAF2EE1A3A3F0DBBE1ABA48D32866A00:2",
		"4C38B2C13AEB99AF5600786894F9BA4F91E:1",
		"4DBA1704C78FEEF1E1B61113129749375A1:1",
		"4ED3FF82BB8142CF2C5FBCC330A693F96E7:2",
		"4F1B48945B77F602143EB51867BDE562247:6",
		"4F5F41B8B78197A5670BAA9F911CE72B969:3",
		"50699CA69C15673760C8D8F03FCF538E7CA:4",
		"512E1026E8938DDFB673E7CF9CB5D0EDA3F:2",
		"5144BAF0A1CFDC9AA29425271D5F999EB45:4",
		"51693057869E3817C08F35B6E37D5F0E140:4",
		"527A4E4F3C41FD4D0F5E533A735B34863FB:3",
		"528E44DBD740D8F625E569B310E40B66794:2",
		"52C45BC0D7886BE52A8CE0BB79DA17FF7F7:1",
		"53457056FDF3993BF4F23BC1AE3EA71958E:112",
		"549AE90EA9FC07563A7CB532842BAACC4AE:5",
		"54DA7BD8656CA680793CE25918E47A5164D:1882",
		"54F23AC57AF354CC213CC24F304333B1CA7:1",
		"54FE9336465CA7918B6A58925E443E48049:2",
		"5579C301C0C281581DD345E26565A0874B4:1",
		"557A0A67A95C702D8075D00A06A471747A7:1",
	}

	// P@ssword
	var sha1Pass string = "9E7C97801CB4CCE87B6C02F98291A6420E6400AD"

	found, occurances := CheckPassword(sha1Pass[5:], testList1)

	if !found {
		t.Log("Could not find P@ssword in list1.")
		t.Fail()
	}

	if occurances != 7491 {
		t.Log("P@ssword is known to have 7491 occurances in the list1.")
		t.Fail()
	}

	found, occurances = CheckPassword(sha1Pass[5:], testList2)

	if found || occurances > 0 {
		t.Log("List2 does not contain P@ssword.")
		t.Fail()
	}
}
